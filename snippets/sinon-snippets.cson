'.source.js':
  'sinon.spy':
    'prefix': 'sinon.spy'
    'body': 'sinon.spy();'
  'sinon.stub':
    'prefix': 'sinon.stub'
    'body': 'sinon.stub();'
  'sinon.mock':
    'prefix': 'sinon.mock'
    'body': 'sinon.mock();'
  'sinon.assert.notCalled':
    'prefix': 'notCalled'
    'body': 'sinon.assert.notCalled(${1:spy});'
  'sinon.assert.called':
    'prefix': 'called'
    'body': 'sinon.assert.called(${1:spy});'
  'sinon.assert.calledOnce':
    'prefix': 'calledOnce'
    'body': 'sinon.assert.calledOnce(${1:spy});'
  'sinon.assert.calledTwice':
    'prefix': 'calledTwice'
    'body': 'sinon.assert.calledTwice(${1:spy});'
  'sinon.assert.calledThrice':
    'prefix': 'calledThrice'
    'body': 'sinon.assert.calledThrice(${1:spy});'
  'sinon.assert.callCount':
    'prefix': 'callCount'
    'body': 'sinon.assert.callCount(${1:spy}, ${2:4});'
  'sinon.assert.callOrder':
    'prefix': 'callOrder'
    'body': 'sinon.assert.callOrder(${1:spy1, spy2, ...});'
  'sinon.assert.calledOn':
    'prefix': 'calledOn'
    'body': 'sinon.assert.calledOn(${1:spy}, ${2:obj});'
  'sinon.assert.alwaysCalledOn':
    'prefix': 'alwaysCalledOn'
    'body': 'sinon.assert.alwaysCalledOn(${1:spy}, ${2:obj});'
  'sinon.assert.calledWith':
    'prefix': 'calledWith'
    'body': 'sinon.assert.calledWith(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.alwaysCalledWith':
    'prefix': 'alwaysCalledWith'
    'body': 'sinon.assert.alwaysCalledWith(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.neverCalledWith':
    'prefix': 'neverCalledWith'
    'body': 'sinon.assert.neverCalledWith(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.calledWithExactly':
    'prefix': 'calledWithExactly'
    'body': 'sinon.assert.calledWithExactly(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.alwaysCalledWithExactly':
    'prefix': 'alwaysCalledWithExactly'
    'body': 'sinon.assert.alwaysCalledWithExactly(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.calledWithMatch':
    'prefix': 'calledWithMatch'
    'body': 'sinon.assert.calledWithMatch(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.alwaysCalledWithMatch':
    'prefix': 'alwaysCalledWithMatch'
    'body': 'sinon.assert.alwaysCalledWithMatch(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.neverCalledWithMatch':
    'prefix': 'neverCalledWithMatch'
    'body': 'sinon.assert.neverCalledWithMatch(${1:spy}, ${2:arg1, arg2, ...});'
  'sinon.assert.threw':
    'prefix': 'threw'
    'body': 'sinon.assert.threw(${1:spy}, ${2:exception});'
  'sinon.assert.alwaysThrew':
    'prefix': 'alwaysThrew'
    'body': 'sinon.assert.alwaysThrew(${1:spy}, ${2:exception});'
  'sinon.match':
    'prefix': 'sinon.match'
    'body': 'sinon.match($1)'
  'sinon.match.any':
    'prefix': 'sinon.match.any'
    'body': 'sinon.match.any'
  'sinon.match.defined':
    'prefix': 'sinon.match.defined'
    'body': 'sinon.match.defined'
  'sinon.match.truthy':
    'prefix': 'sinon.match.truthy'
    'body': 'sinon.match.truthy'
  'sinon.match.falsy':
    'prefix': 'sinon.match.falsy'
    'body': 'sinon.match.falsy'
  'sinon.match.bool':
    'prefix': 'sinon.match.bool'
    'body': 'sinon.match.bool'
  'sinon.match.number':
    'prefix': 'sinon.match.number'
    'body': 'sinon.match.number'
  'sinon.match.string':
    'prefix': 'sinon.match.string'
    'body': 'sinon.match.string'
  'sinon.match.object':
    'prefix': 'sinon.match.object'
    'body': 'sinon.match.object'
  'sinon.match.func':
    'prefix': 'sinon.match.func'
    'body': 'sinon.match.func'
  'sinon.match.array':
    'prefix': 'sinon.match.array'
    'body': 'sinon.match.array'
  'sinon.match.regexp':
    'prefix': 'sinon.match.regexp'
    'body': 'sinon.match.regexp'
  'sinon.match.date':
    'prefix': 'sinon.match.date'
    'body': 'sinon.match.date'
  'sinon.match.same':
    'prefix': 'sinon.match.same'
    'body': 'sinon.match.same(${1:ref});'
  'sinon.match.typeOf':
    'prefix': 'sinon.match.typeOf'
    'body': 'sinon.match.typeOf(${1:type});'
  'sinon.match.instanceOf':
    'prefix': 'sinon.match.instanceOf'
    'body': 'sinon.match.instanceOf(${1:type});'
  'sinon.match.has':
    'prefix': 'sinon.match.has'
    'body': 'sinon.match.has(${1:property [, expectation]});'
  'sinon.match.hasOwn':
    'prefix': 'sinon.match.hasOwn'
    'body': 'sinon.match.hasOwn(${1:property[, expectation]});'
  'sinon.sandbox.create':
    'prefix': 'sinon.sandbox.create'
    'body': 'sinon.sandbox.create(${1:config});'
  'sinon.fakeServer.create':
    'prefix': 'sinon.fakeServer.create'
    'body': 'sinon.fakeServer.create(${1:config});'
  'sinon.fakeServerWithClock.create':
    'prefix': 'sinon.fakeServerWithClock.create'
    'body': 'sinon.fakeServerWithClock.create(${1:config});'
  'sinon.useFakeXMLHttpRequest':
    'prefix': 'sinon.useFakeXMLHttpRequest'
    'body': 'sinon.useFakeXMLHttpRequest();'
  'sinon.useFakeTimers':
    'prefix': 'sinon.useFakeTimers'
    'body': 'sinon.useFakeTimers(${1:now});'
  'sinon.expectation.create':
    'prefix': 'sinon.expectation.create'
    'body': 'sinon.expectation.create(${1:methodName});'
